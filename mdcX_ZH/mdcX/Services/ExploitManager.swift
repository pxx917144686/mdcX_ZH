//
//  ExploitManager.swift
//  mdcX
//
//  Created by 이지안 on 5/9/25.
//

import Foundation

class ExploitManager {
    static let shared = ExploitManager()
    var logStore: LogStore?
    private init() {}

    private func log(_ message: String) {
        logStore?.append(message: message)
    }

    func applyFileZeroTweak(_ tweak: Tweak,
                            zeroAllFilePages: Bool = false,
                            completion: @escaping (_ successCount: Int, _ totalFiles: Int, _ resultsLog: String) -> Void) {
        log("开始执行文件调整: \(tweak.name)")

        switch tweak.action {
        case .zeroOutFiles(let paths):
            if paths.isEmpty {
                let emptyPathLog = "错误: 调整项'\(tweak.name)'没有指定路径。"
                log(emptyPathLog)
                completion(0, 0, "未指定路径。\n")
                return
            }

            let totalFiles = paths.count
            var individualResults = [String?](repeating: nil, count: totalFiles)
            var successAccumulator = 0
            let group = DispatchGroup()
            let accumulatorQueue = DispatchQueue(label: "com.speedy67.ExploitManager.swiftAccumulator")

            for (index, pathString) in paths.enumerated() {
                group.enter()
                DispatchQueue.global(qos: .userInitiated).async {
                    var fileOpSuccess = false
                    var opResultCode: Int32 = -99
                    var fileResultDescription: String

                    if pathString.isEmpty {
                        fileResultDescription = "[(空路径) 索引 \(index)]: 无效的空路径。"
                        opResultCode = 7
                    } else {
                        opResultCode = applySwiftFileZeroExploit(filePath: pathString, zeroAllPages: zeroAllFilePages)
                        if opResultCode == 0 {
                            fileOpSuccess = true
                        }
                        fileResultDescription = "\((pathString as NSString).lastPathComponent): \(fileOpSuccess ? "成功" : "失败 (代码: \(opResultCode))")"
                    }
                    
                    individualResults[index] = fileResultDescription
                    
                    if fileOpSuccess {
                        accumulatorQueue.async {
                            successAccumulator += 1
                        }
                    }
                    group.leave()
                }
            }

            group.notify(queue: .main) {
                let finalDetailedLog = "'\(tweak.name)'的结果:\n" +
                                       individualResults.compactMap { $0 }.joined(separator: "\n")
                
                self.log("完成调整'\(tweak.name)': \(successAccumulator)/\(totalFiles) 成功。")
                completion(successAccumulator, totalFiles, finalDetailedLog)
            }
        case .replaceFile(let path, let content):
            // 现有代码
        case .modifyPlist(path: let path, key: let key, value: let value):
            // 添加实现
            return true // 或适当的实现
        case .executeCommand(command: let command, args: let args):
            // 添加实现
            return true // 或适当的实现
        @unknown default:
            let unknownActionLog = "错误: 调整项'\(tweak.name)'包含未知操作。"
            log(unknownActionLog)
            completion(0, 0, "未知操作。\n")
        }
    }
}
